<html>
<head>
<title>Slip ガンマン</title>

<script type="text/javascript" src="jquery-1.10.2.min.js"></script>
<script type="text/javascript" src="enchant.min.js"></script>
<script type="text/javascript" src="three.min.js"></script>

<link rel="manifest" href="manifest.json"></link>
<!--<script src="pwabuilder-sw-register.js"></script>-->

<meta http-equiv="Content-type"
         content="text/html; charset=UTF-8">

<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="apple-mobile-web-app-title" content="gunman">
<link rel="apple-touch-icon" href="icon/gun_eyes.72x72.png" sizes="72x72">
<link rel="apple-touch-icon" href="icon/gun_eyes.114x114.png" sizes="114x114">
<link rel="apple-touch-icon" href="icon/gun_eyes.120x120.png" sizes="120x120">
<link rel="apple-touch-icon" href="icon/gun_eyes.144x144.png" sizes="144x144">
<link rel="apple-touch-icon" href="icon/gun_eyes.192x192.png" sizes="192x192">

<script>
var cv_width;
var cv_height;
</script>

<script type="text/javascript">
window.addEventListener("deviceorientation", handleOrientation, true);

function redrawArrow(alpha, beta, gamma){
  var cvs = document.getElementById("cv");
  var ctx = cvs.getContext("2d");

  var baseX = cv_width/2;
  var baseY = cv_height*0.8;

  ctx.clearRect(0,0,cv_width,cv_height);

  ctx.beginPath();

//  ctx.moveTo(100,100);
//  ctx.lineTo(200,200);
  ctx.moveTo(baseX,baseY);
  ctx.lineTo(baseX + (50 * Math.sin(gamma * 2 * Math.PI / 360 )) , baseY + (50 * Math.sin(beta * 2 * Math.PI / 360 )) );

  ctx.stroke();
}

function handleOrientation(event){

    var alpha    = event.alpha;
    var beta     = event.beta;
    var gamma    = event.gamma;

    document.getElementById('alpha').value = alpha;
    document.getElementById('beta').value = beta;
    document.getElementById('gamma').value = gamma;

//    redrawArrow(alpha,beta,gamma);

    var diffX = Math.sin(beta * 2 * Math.PI /360);
    var diffZ = Math.sin(gamma * 2 * Math.PI /360);

    moveCubes(diffX, 0, diffZ);

}
</script>


<style>
body {
    margin: 0;
    padding: 0;
}

ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: #333;
}

li {
    float: left;
    color: white;
    font-size: 40px;
    font-family: sans-serif;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
}
</style>

</head>

<body>
<center>
<!--<h1 style="color: #ffffff; background-color: #0000cc; padding: 30px" align="left">Slip ガンマン</h1>-->
<ul>
<li>Slip ガンマン</li>
</ul>


<div id="ttt">
Slip ガンマンです。<p>

ホーム画面に追加をしてみてください。<br>
アプリのように起動できるはず。<p>
端末の回転センサーも使ってみました。<p>
<hr width=80%>
</div>
<div id="ttt2">
&nbsp;<p>&nbsp;<p>&nbsp;<p>
</div>

<script type="text/javascript">
function getParam(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

p = getParam('PWA');
if ( p == "on" ) {
  document.getElementById("ttt").style.display="none";
  document.getElementById("ttt2").style.display="block";
} else {
  document.getElementById("ttt").style.display="block";
  document.getElementById("ttt2").style.display="none";
}
</script>


<p>
<!--<canvas id="cv" width="300" height="300"></canvas>

<script>

function myResize(){

  cv_width = $(window).width();
  $("#cv").attr("width",  cv_width  );
  cv_height = $(window).width() * 0.6;
  $("#cv").attr("height", cv_height);

}

myResize();

$(window).resize(function(e)
{
   myResize();

});
</script>
-->

<p>
alpha: <input type="text" size="5" id="alpha" value="0">
beta: <input type="text" size="5" id="beta" value="0">
gamma: <input type="text" size="5" id="gamma" value="0">
<p>
<textarea id="debug" rows="2" cols="50">
debug
</textarea>

<hr width=80%>

<!--
[ <a href="../index.html">ガンマンのページへ戻る</a> ]
-->
[ <a href="http://fc.jpn.org/ryuba/gunman/index.html">ガンマンのページへ戻る</a> ]

</center>


<script type="text/javascript">

	function init() {
		container = document.createElement( 'div' );
		document.body.appendChild( container );

		camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.position.z = 10;

		// scene

		scene = new THREE.Scene();

		var ambient = new THREE.AmbientLight( 0x444444 );
		scene.add( ambient );

		var directionalLight = new THREE.DirectionalLight( 0xffeedd );
		directionalLight.position.set( 100, -100, 200).normalize();
		scene.add( directionalLight );

		renderer = new THREE.WebGLRenderer();
		renderer.setPixelRatio( window.devicePixelRatio );
		renderer.setSize( window.innerWidth, window.innerHeight );
		renderer.setClearColor( 0x888888 );
//                                renderer.setFaceCulling (true);
		container.appendChild( renderer.domElement );

//				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
		window.addEventListener( 'resize', onWindowResize, false );

		onWindowResize()

	}

	function onWindowResize() {

		windowHalfX = window.innerWidth / 2;
		windowHalfY = window.innerHeight / 2;

		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		renderer.setSize( window.innerWidth, window.innerHeight );

	}

	function createCube(scene, sx, sy, sz, x, y, z, color) {
		var geometry = new THREE.CubeGeometry(sx, sy, sz);
//				var material = new THREE.MeshBasicMaterial({color: 0x333333, wireframe: true});
		var material = new THREE.MeshBasicMaterial({color: color} );
		var cube = new THREE.Mesh(geometry, material);
		cube.position.x = x;
		cube.position.y = y;
		cube.position.z = z;
		scene.add(cube);

		cubes[cubeNum++] = cube;

		var geometry = new THREE.CubeGeometry(sx, sy, sz);
//				var material = new THREE.MeshBasicMaterial({color: 0x333333, wireframe: true});
//				var material = new THREE.MeshBasicMaterial({color: (0xffffff - color), wireframe:true} );
		var material = new THREE.MeshBasicMaterial({color: (0x444444), wireframe:true} );
		var cube2 = new THREE.Mesh(geometry, material);
		cube2.position.x = x;
		cube2.position.y = y;
		cube2.position.z = z;
		scene.add(cube2);

		cubes[cubeNum++] = cube2;

	}

	function moveCubes(x,y,z) {
		var i;
		for ( i=0; i<cubeNum; i++ ) {
			cubes[i].position.x += x;
			cubes[i].position.y += y;
			cubes[i].position.z += z;

//			if ( cubes[i].position.x <= -25 ) {
//				cubes[i].position.x += 40;
//			}
		}
	}

	function render() {
//             	camera.position.x = 10;
//            	camera.position.y = 2;
//             	camera.position.z = 10;

            	camera.position.x = 10;
             	camera.position.y = 10;
             	camera.position.z = 0;

//		camera.lookAt( {x: scene.position.x + 3 , y: scene.position.y, z: scene.position.z} );
		camera.lookAt( {x: 0 , y: 0, z: 0} );
		renderer.render( scene, camera );
	}


	cubeData = [
		[
			 [1,1,0,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
		],
		[
			 [1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
		]
	];

	enchant();

	var cubes  = new Array(500);
	var cubeNum = 0;
 	var camera, scene, renderer;

	init();

	var game = new Game(window.innerWidth, window.innerHeight);

	game.fps = 60;
	game.onload = function(){
	        var gunmanSprite = new Sprite(179, 230);

		for (i=0; i<cubeData[0].length; i++) {
			for (j=0; j<cubeData[0][i].length; j++) {
//			        createCube(scene, 1,1,1, i    , -1.5 ,0, 0x884444);
//				createCube(scene, 1,1,1, (i+1), -1.5 ,0, 0x444488);
				if ( cubeData[0][i][j] == 1 ) {
					x = -cubeData[0].length + i;
					y = 0;
					z = cubeData[0][i].length/2 -j;
					if ( (i + j) % 2 == 0 ) {
						createCube(scene, 1,1,1, x,y,z, 0x884444);
					} else {
						createCube(scene, 1,1,1, x,y,z, 0x444488);
					}
				}
			}
		}

		gunmanSprite.addEventListener(enchant.Event.ENTER_FRAME, function(){

			try {
//				moveCubes(0, 0, 0);
				render();
			} catch (exception) {
				document.getElementById('debug').value = exception;
			}
		});
 
	        game.rootScene.addChild(gunmanSprite);
	};

	game.start();


</script>


</body>
</html>