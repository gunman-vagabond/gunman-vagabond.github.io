<html>
<head>
<title>スイスイガンマン</title>

<script type="text/javascript" src="jquery-1.10.2.min.js"></script>
<script type="text/javascript" src="enchant.min.js"></script>
<script type="text/javascript" src="three.min.js"></script>
<script type="text/javascript" src="MMDLoader.js"></script>
<script type="text/javascript" src="TGALoader.js"></script>
<script type="text/javascript" src="charsetencoder.min.js"></script>


<link rel="manifest" href="manifest.json"></link>
<!--<script src="pwabuilder-sw-register.js"></script>-->

<meta http-equiv="Content-type"
         content="text/html; charset=UTF-8">

<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="apple-mobile-web-app-title" content="gunman">
<link rel="apple-touch-icon" href="icon/gun_eyes.72x72.png" sizes="72x72">
<link rel="apple-touch-icon" href="icon/gun_eyes.114x114.png" sizes="114x114">
<link rel="apple-touch-icon" href="icon/gun_eyes.120x120.png" sizes="120x120">
<link rel="apple-touch-icon" href="icon/gun_eyes.144x144.png" sizes="144x144">
<link rel="apple-touch-icon" href="icon/gun_eyes.192x192.png" sizes="192x192">

<script>
var cv_width;
var cv_height;
</script>

<script type="text/javascript">
</script>


<style>
body {
    margin: 0;
    padding: 0;
}

ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: #333;
}

li {
    float: left;
    color: white;
    font-size: 40px;
    font-family: sans-serif;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
}
</style>

</head>

<body>
<center>
<!--<h1 style="color: #ffffff; background-color: #0000cc; padding: 30px" align="left">スイスイガンマン</h1>-->
<ul>
<li>スイスイガンマン</li>
</ul>


<div id="ttt">
スイスイガンマンです。<p>

ホーム画面に追加をしてみてください。<br>
アプリのように起動できるはず。<p>
端末の回転センサーも使ってみました。<p>
<hr width=80%>
</div>
<div id="ttt2">
&nbsp;<p>&nbsp;<p>&nbsp;<p>
</div>

<script type="text/javascript">
function getParam(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

p = getParam('PWA');
if ( p == "on" ) {
  document.getElementById("ttt").style.display="none";
  document.getElementById("ttt2").style.display="block";
} else {
  document.getElementById("ttt").style.display="block";
  document.getElementById("ttt2").style.display="none";
}
</script>

<p>

<style>
#__div {height:50px; background-color:#00ff00; font-weight:bold; position:relative }
#___div {position:relative }
span.time_label {position:absolute; top:10px; left:10px; }
</style>
<div id="div" _style="width:100px; height:100px">
<span class="time_label" id="time_label" style="display:none;"><input type="text" size="9" id="progress_time" style=" color:#ffffff; background-color:rgba(128,128,128,0.2); font-size:40px; text-align:center; "></span>
</div>

<p>

<hr>

<textarea id="debug" rows="2" cols="50">
debug
</textarea>

<p>
alpha: <input type="text" size="5" id="alpha" value="0">
beta: <input type="text" size="5" id="beta" value="0">
gamma: <input type="text" size="5" id="gamma" value="0">
<p>
<input type="text" size="1" id="cd0" value="">
<input type="text" size="1" id="cd1" value="">
<input type="text" size="1" id="cd2" value="">
<input type="text" size="1" id="cd3" value=""><br>
<input type="text" size="1" id="cd4" value="">
<input type="text" size="1" id="cd5" value="">
<input type="text" size="1" id="cd6" value="">
<input type="text" size="1" id="cd7" value=""><br>
<input type="text" size="1" id="cd8" value="">
<input type="text" size="1" id="cd9" value="">
<input type="text" size="1" id="cdA" value="">
<input type="text" size="1" id="cdB" value=""><br>
<input type="text" size="1" id="cdC" value="">
<input type="text" size="1" id="cdD" value="">
<input type="text" size="1" id="cdE" value="">
<input type="text" size="1" id="cdF" value=""><br>
<p>
gunman_X: <input type="text" size="5" id="gunman_X" value="0">
gunman_Z: <input type="text" size="5" id="gunman_Z" value="0">
<p>



<hr width=80%>

<!--
[ <a href="../index.html">ガンマンのページへ戻る</a> ]
-->
[ <a href="http://fc.jpn.org/ryuba/gunman/index.html">ガンマンのページへ戻る</a> ]

</center>


<script type="text/javascript">
	cubeData = [
		[
			 [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,9,9,9,9,9,9,9,9,9,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,0,0,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,0,0,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,9,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,9,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,8,1,1,1,1,9,1,1,9]
			,[9,1,1,9,9,9,9,9,9,9,9,9,9,9,9,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,9,9,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,9,9,9,9,9,9,9,9,9,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,0,0,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,0,0,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,9,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,9,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,9,9,9,9,9,9,9,9,9,9,9,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]
		],
		[
			 [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,9,9,9,9,9,9,9,9,9,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,0,0,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,0,0,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,9,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,9,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,9,1,1,1,1,1,8,1,1,1,1,9,1,1,9]
			,[9,1,1,9,9,9,9,9,9,9,9,9,9,9,9,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9]
			,[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]
		],
		[
			 [9,9,9,9,9,9,9,9,9,9,9,9]
			,[9,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,0,0,1,1,1,1,1,1,9]
			,[9,1,1,0,0,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,9,1,1,1,9]
			,[9,1,1,1,1,1,1,1,9,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,1,1,1,1,1,9]
			,[9,1,1,1,1,1,8,1,1,1,1,9]
			,[9,9,9,9,9,9,9,9,9,9,9,9]
		],
		[
			 [1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
			,[1,1,1,1,1,1,1,1,1,1]
		]
	];

	var buttonJ = null;
 	var buttonG = null;

	function init() {
		container = document.getElementById('div')

		camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.position.z = 10;

		// scene

		scene = new THREE.Scene();

//		var ambient = new THREE.AmbientLight( 0x444444 );
		var ambient = new THREE.AmbientLight( 0x888888 );
		scene.add( ambient );

		var directionalLight = new THREE.DirectionalLight( 0xffeedd );
//		directionalLight.position.set( 100, 100, 200).normalize();
		directionalLight.position.set( -1, 10, 3);
		directionalLight.castShadow = true;
		scene.add( directionalLight );

		renderer = new THREE.WebGLRenderer();
		renderer.setPixelRatio( window.devicePixelRatio );
		renderer.setSize( window.innerWidth, window.innerHeight );
		renderer.setClearColor( 0x888888 );
//                                renderer.setFaceCulling (true);
		container.appendChild( renderer.domElement );

//				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
		window.addEventListener( 'resize', onWindowResize, false );

		onWindowResize()

	}

	function onWindowResize() {

		windowHalfX = window.innerWidth / 2;
		windowHalfY = window.innerHeight / 2;

		var width = window.innerWidth;
		var height = window.innerHeight/2;

		camera.aspect = width / height ;
		camera.updateProjectionMatrix();

		renderer.setSize( width, height );

		if ( buttonJ == null ) return;

	        buttonJ.x = 100;
	        buttonJ.y = height-100;
	        buttonJ.scaleX = buttonJ.scaleY = 2;

	        buttonG.x = width-160;
	        buttonG.y = height-100;
	        buttonG.scaleX = buttonG.scaleY = 2;

	}

	var renderer = new THREE.WebGLRenderer({antialias: true}); // アンチエイリアスを適用
	var mmdLoader = new THREE.MMDLoader(); // MMDLoader作成 
	var mmdHelper = new THREE.MMDHelper(renderer); // MMDHelper作成
	var gunman = null;
	var cylinder = null;

	function createGunman(scene, x, y, z ) {
		// MMDデータの読み込み・オブジェクト生成・シーンへの配置
//		mmdLoader.setDefaultTexturePath('MMD/');
		mmdLoader.loadModel('MMD/Gunman.HatsuneVer2.pmd', function(object) {
			object.scale.set(0.1, 0.1, 0.1);
			object.castShadow = true;
			scene.add(object);

			mmdHelper.add(object); // メッシュオブジェクトをヘルパーに登録
		   	gunman = object;
			gunman.position.set(x, y, z);
			gunman.rotation.set(0, -Math.PI/2,  0);
		});	
		mmdHelper.render(scene, camera); // HHDHelperから呼び出す（ラッパーメソッド）

//		// アニメーション処理
//		(function render() {
//			requestAnimationFrame(render);
//			trackballControls.update(); // フレームごとにトラックボールコントロールを更新
//			mmdHelper.render(scene, camera); // HHDHelperから呼び出す（ラッパーメソッド）
//		})();

//		var loader = new THREE.MMDLoader();
//		// Load a MMD model
//		loader.load(
//			// path to PMD/PMX file
//			'MMD/Gunman.HatsuneVer2.pmd',
//			// called when the resource is loaded
//			function ( mesh ) {	
//				scene.add( mesh );
//			},
//			// called when loading is in progresses
//			function ( xhr ) {
//				console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );
//			},
//			// called when loading has errors
//			function ( error ) {
//				console.log( 'An error happened' );
//				document.getElementById('debug').value = error;
//			}
//		);

	}


	function createCylinder(scene, size,height, x, y, z, color ) {
		cylinder = new THREE.Mesh(
			//球のジオメトリ(size:半径, 垂直分割数:20, 水平分割数:20)
			new THREE.CylinderGeometry(size, size, height, 20, 20),
			//マテリアル （材質）
			new THREE.MeshPhongMaterial({
				//色（１６進数）
				color: color,
				metal: true,
				shininess: 30
			})
		);
		cylinder.castShadow = true;
		cylinder.receiveShadow = true;
		scene.add(cylinder);
		cylinder.position.set(x, y, z);
	}

	function createSphere(scene, size , x, y, z, color ) {
		sphere = new THREE.Mesh(
			//球のジオメトリ(size:半径, 垂直分割数:20, 水平分割数:20)
			new THREE.SphereGeometry(size, 20, 20),
			//マテリアル （材質）
			new THREE.MeshPhongMaterial({
				//色（１６進数）
				color: color,
				metal: true,
				shininess: 30
			})
		);
		//影の設定
		sphere.castShadow = true;
		//影の設定　　　　　　　　
		sphere.receiveShadow = true;
		scene.add(sphere);                           
		sphere.position.set(x, y, z);
	}

	function createCube(scene, sx, sy, sz, x, y, z, color) {
//		var geometry = new THREE.BoxGeometry(sx, sy, sz);
		var geometry = new THREE.CubeGeometry(sx, sy, sz);
//				var material = new THREE.MeshBasicMaterial({color: 0x333333, wireframe: true});
//		var material = new THREE.MeshBasicMaterial({color: color} );
//		var material = new THREE.MeshPhongMaterial({color: color, metal: true, shininess:30} );
//		var material = new THREE.MeshLambertMaterial({color: color, metal: true, shininess:30, transparent: true} );
		var material = new THREE.MeshLambertMaterial({color: color} );
		var cube = new THREE.Mesh(geometry, material);
		cube.position.x = x;
		cube.position.y = y;
		cube.position.z = z;
		//影の設定
		cube.castShadow = true;
		//影の設定　　　　　　　　
		cube.receiveShadow = true;

		scene.add(cube);

		cubes[cubeNum++] = cube;

//		var geometry = new THREE.CubeGeometry(sx, sy, sz);
//		var material = new THREE.MeshBasicMaterial({color: (0x444444), wireframe:true} );
//		var cube2 = new THREE.Mesh(geometry, material);
//		cube2.position.x = x;
//		cube2.position.y = y;
//		cube2.position.z = z;
//		scene.add(cube2);
//		cubes[cubeNum++] = cube2;

	}

	function doMoveGunman(x,y,z, dropGunman) {

		if ( gunman != null && cylinder != null ) {
			gunman.position.x += x;
			gunman.position.y += y;
			gunman.position.z += z;

			cylinder.position.x += x;
			cylinder.position.y += y;
			cylinder.position.z += z;

			if ( dropGunman == true ) {
				gunman.position.y   = 0.1;
				cylinder.position.y = 0.0;
			} else {
				gunman.position.y   = 0.6;
				cylinder.position.y = 0.5;
			}
		}
	}

	var alpha_ini = -1;
	var beta_ini = -1;
	var gamma_ini = -1;

	var pre_diffX = 0, pre_diffX2 = 0;
	var pre_diffZ = 0, pre_diffZ2 = 0;

	var gunman_X=0;
	var gunman_Z=0;

	function moveGunman(alpha,beta,gamma){

		if ( alpha_ini == -1 ) { alpha_ini = alpha; }
		if ( beta_ini == -1 ) { beta_ini = beta; }
		if ( gamma_ini == -1 ) { gamma_ini = gamma; }


		var gx = Math.floor(gunman_X);
		var gz = Math.floor(gunman_Z);

		var gunmanDrop = false;

		var cd;
		try{
			cd = [ 
				 [cubeData[0][gx-1][gz-1], cubeData[0][gx-1][gz], cubeData[0][gx-1][gz+1], cubeData[0][gx-1][gz+2]]
				,[cubeData[0][gx  ][gz-1], cubeData[0][gx  ][gz], cubeData[0][gx  ][gz+1], cubeData[0][gx  ][gz+2]]
				,[cubeData[0][gx+1][gz-1], cubeData[0][gx+1][gz], cubeData[0][gx+1][gz+1], cubeData[0][gx+1][gz+2]]
				,[cubeData[0][gx+2][gz-1], cubeData[0][gx+2][gz], cubeData[0][gx+2][gz+1], cubeData[0][gx+2][gz+2]]
			];
			document.getElementById('cd0').value = cd[0][0];
			document.getElementById('cd1').value = cd[0][1];
			document.getElementById('cd2').value = cd[0][2];
			document.getElementById('cd3').value = cd[0][3];
			document.getElementById('cd4').value = cd[1][0];
			document.getElementById('cd5').value = cd[1][1];
			document.getElementById('cd6').value = cd[1][2];
			document.getElementById('cd7').value = cd[1][3];
			document.getElementById('cd8').value = cd[2][0];
			document.getElementById('cd9').value = cd[2][1];
			document.getElementById('cdA').value = cd[2][2];
			document.getElementById('cdB').value = cd[2][3];
			document.getElementById('cdC').value = cd[3][0];
			document.getElementById('cdD').value = cd[3][1];
			document.getElementById('cdE').value = cd[3][2];
			document.getElementById('cdF').value = cd[3][3];

		} catch (exception) {
			cd = [ [-1,-1,-1,-1]
			      ,[-1,-1,-1,-1]
			      ,[-1,-1,-1,-1]
			      ,[-1,-1,-1,-1]
			];

		}

		if ( cd[1][1]==0 && cd[1][2]==0 && cd[2][1]==0 && cd[2][2]==0 ) {
			gunmanDrop = true;
		}

		var diffX = (-1) *  Math.sin( (beta - beta_ini) * 2 * Math.PI /360) / 5 ;
		var diffZ = Math.sin( (gamma - gamma_ini) * 2 * Math.PI /360) / 5 ;

		var tot_diffX = pre_diffX2 + pre_diffX + diffX;
		var tot_diffZ = pre_diffZ2 + pre_diffZ + diffZ;

		var tmp_gunman_X = gunman_X - tot_diffX;
		var tmp_gunman_Z = gunman_Z + tot_diffZ;
		var floor_gunman_X = Math.floor(gunman_X);
		var floor_tmp_gunman_X = Math.floor(tmp_gunman_X);
		var floor_gunman_Z = Math.floor(gunman_Z);
		var floor_tmp_gunman_Z = Math.floor(tmp_gunman_Z);

		var ceil_gunman_X = Math.ceil(gunman_X);
		var ceil_tmp_gunman_X = Math.ceil(tmp_gunman_X);
		var ceil_gunman_Z = Math.ceil(gunman_Z);
		var ceil_tmp_gunman_Z = Math.ceil(tmp_gunman_Z);

		if ( diffX >= 0 ) { //上に行く

			if ( floor_gunman_X != floor_tmp_gunman_X ) {
				//ブロックをまたがって移動
//				if ( cubeData[0][floor_tmp_gunman_X][floor_gunman_Z] == 9 
//				  || cubeData[0][floor_tmp_gunman_X][ceil_gunman_Z] == 9
//				) {

				// .OO.
				// .xx.
				// .xx.
				// .,,.

				if ( cd[0][1] == 9  || cd[0][2] == 9 ) {
					tot_diffX = 0;
//					_tot_diffX = floor_gunman_X - gunman_X;
//					diffX = _tot_diffX - pre_diffX2 - pre_diffX;
//					tot_diffX = _tot_diffX;
				}
				if ( gunmanDrop && ( cd[0][1] != 0 || cd[0][2] != 0 ) ) {
					tot_diffX = 0;
				}

			}
		}

		if ( diffZ <= 0 ) { //左に行く
			if ( floor_gunman_Z != floor_tmp_gunman_Z ) {
				//ブロックをまたがって移動
//				if ( cubeData[0][floor_gunman_X][floor_tmp_gunman_Z] == 9
//				  || cubeData[0][ceil_gunman_X][floor_tmp_gunman_Z] == 9
//				) {

				// ....
				// Oxx.
				// Oxx.
				// .,,.

				if ( cd[1][0] == 9 || cd[2][0] == 9 ) {
					tot_diffZ = 0;
//					_tot_diffZ = floor_gunman_Z - gunman_Z;
//					diffZ = _tot_diffZ - pre_diffZ2 - pre_diffZ;
//					tot_diffZ = _tot_diffZ;
				}
				if ( gunmanDrop && ( cd[1][0] != 0 || cd[2][0] != 0 ) ) {
					tot_diffZ = 0;
				}
			}
		}

		if ( diffX < 0 ) { //下に行く
			if ( ceil_gunman_X != ceil_tmp_gunman_X ) {
				//ブロックをまたがって移動
//				if ( cubeData[0][ceil_tmp_gunman_X][ceil_gunman_Z] == 9
//				  || cubeData[0][ceil_tmp_gunman_X][floor_gunman_Z] == 9
//				) {

				// ....
				// .xx.
				// .xx.
				// .OO.
				if ( cd[3][1] == 9 || cd[3][2] == 9 ) {
					tot_diffX = 0;
//					_tot_diffX = ceil_gunman_X - gunman_X;
//					diffX = _tot_diffX - pre_diffX2 - pre_diffX;
//					tot_diffX = _tot_diffX;
				}
				if ( gunmanDrop && ( cd[3][1] != 0 || cd[3][2] != 0 ) ) {
					tot_diffX = 0;
				}
			}
		}

		if ( diffZ > 0 ) { //右に行く
			if ( ceil_gunman_Z != ceil_tmp_gunman_Z ) {
				//ブロックをまたがって移動
//				if ( cubeData[0][ceil_gunman_X][ceil_tmp_gunman_Z] == 9
//				  || cubeData[0][floor_gunman_X][ceil_tmp_gunman_Z] == 9
//				) {

				// ....
				// .xxO
				// .xxO
				// ....

				if ( cd[1][3] == 9 || cd[2][3] == 9 ) {
					tot_diffZ = 0;
//					tot_diffZ = ceil_gunman_Z - gunman_Z;
//					diffZ = _tot_diffZ - pre_diffZ2 - pre_diffZ;
//					tot_diffZ = _tot_diffZ;
				}
				if ( gunmanDrop && ( cd[1][3] != 0 || cd[2][3] != 0 ) ) {
					tot_diffZ = 0;
				}
			}
		}

//		var gx = floor_gunman_X;
//		var gz = floor_gunman_Z;

//		var up   = (gunman_X - floor_gunman_X <= 0.5)?true:false;
//		var left = (gunman_Z - floor_gunman_Z <= 0.5)?true:false;
//		document.getElementById('left').value = left;
//		document.getElementById('up').value = up;
	
//		var gunmanDrop = false;
//
//		try {
//			var cd = [ 
//				 cubeData[0][gx-1][gz-1], cubeData[0][gx-1][gz], cubeData[0][gx-1][gz+1]
//				,cubeData[0][gx  ][gz-1], cubeData[0][gx  ][gz], cubeData[0][gx  ][gz+1]
//				,cubeData[0][gx+1][gz-1], cubeData[0][gx+1][gz], cubeData[0][gx+1][gz+1]
//			];
//			document.getElementById('cd0').value = cd[0];
//			document.getElementById('cd1').value = cd[1];
//			document.getElementById('cd2').value = cd[2];
//			document.getElementById('cd3').value = cd[3];
//			document.getElementById('cd4').value = cd[4];
//			document.getElementById('cd5').value = cd[5];
//			document.getElementById('cd6').value = cd[6];
//			document.getElementById('cd7').value = cd[7];
//			document.getElementById('cd8').value = cd[8];
//
//			if ( cd[4]==0 && cd[5]==0 && cd[7]==0 && cd[8]==0 ) {
//				gunmanDrop = true;
//			}
//		} catch (exception) {
//			gunmanDrop = false;
//		}

//		moveCubes(tot_diffX, 0,  tot_diffZ);

		doMoveGunman(-1 * tot_diffX, 0, -1 * tot_diffZ, gunmanDrop);

		//gunmanの座標。左上のボックスを(0,0)とする。diffXの方向と逆になってる。
		gunman_X -= tot_diffX;
		gunman_Z += tot_diffZ;

		document.getElementById('gunman_X').value = gunman_X;
		document.getElementById('gunman_Z').value = gunman_Z;

		var rotateY = Math.atan2(diffX, diffZ) + Math.PI;

		if ( gunman != null ) {
			gunman.rotation.set(0, rotateY,  0);
		}

		pre_diffX2 = pre_diffX;
		pre_diffZ2 = pre_diffZ;

		pre_diffX = diffX;
		pre_diffZ = diffZ;

	}

	function moveCubes(x,y,z) {
		var i;
		for ( i=0; i<cubeNum; i++ ) {
			cubes[i].position.x += x;
			cubes[i].position.y += y;
			cubes[i].position.z += z;
		}
	}

	function render() {

		if ( gunman != null ) {
	            	camera.position.x = gunman.position.x + 10;
	             	camera.position.y = 10;
	             	camera.position.z = gunman.position.z + 0;
			camera.lookAt( {x: gunman.position.x , y: 0, z: gunman.position.z} );
		} else {
	            	camera.position.x = 10;
	             	camera.position.y = 10;
	             	camera.position.z = 0;
			camera.lookAt( {x: 0 , y: 0, z: 0} );
		}

		renderer.render( scene, camera );
	}

	enchant();

	var cubes  = new Array(500);
	var cubeNum = 0;
 	var camera, scene, renderer;

	init();

	var game = new Game(window.innerWidth, window.innerHeight / 2 );

	game.preload("buttonJ.png");
	game.preload("buttonG.png");

	game.fps = 60;
	game.onload = function(){
		document.getElementById("div").style.position="relative";
		document.getElementById("time_label").style.display="block";

	        var gunmanSpriteDummy = new Sprite(10, 10);

		for (i=0; i<cubeData[0].length; i++) {
			for (j=0; j<cubeData[0][i].length; j++) {
				if ( cubeData[0][i][j] == 8 ) {
					//gunman Start Position
					//gunmanの座標。左上のボックスを(0,0)とする
					gunman_X = i;
					gunman_Z = j;
				}
			}
		}

		for (i=0; i<cubeData[0].length; i++) {
			for (j=0; j<cubeData[0][i].length; j++) {

				//THREE.js の座標軸(x,y,z)に換算。
				//  x : 縦軸。下方向がプラス
				//  y : 画面に垂直な軸。手前がプラス
				//  z : 横軸。右方向がプラス
//				x = -cubeData[0].length + i;
//				y = 0;
//				z = cubeData[0][i].length/2 -j;
				x = -gunman_X + i;
				y = 0;
				z = gunman_Z -j;

				if ( cubeData[0][i][j] == 1 || cubeData[0][i][j] == 8 ) {
					if ( (i + j) % 2 == 0 ) {
						createCube(scene, 1,1,1, x,y,z, 0x884444);
					} else {
						createCube(scene, 1,1,1, x,y,z, 0x444488);
					}
				}
				else if ( cubeData[0][i][j] == 9 ) {
					if ( (i + j) % 2 == 0 ) {
						createCube(scene, 1,2.1,1, x,y+1.1/2,z, 0x777777);
					} else {
						createCube(scene, 1,2.1,1, x,y+1.1/2,z, 0x77cc77);
					}
				}

				if ( cubeData[0][i][j] == 8 ) {
					//gunman Start Position
					createCylinder(scene, 0.5,0.1, x,0.5,z, 0xff0000);
					createGunman(scene, x,0.6,z);

					//gunmanの座標。左上のボックスを(0,0)とする
					gunman_X = i;
					gunman_Z = j;
					document.getElementById('gunman_X').value = gunman_X;
					document.getElementById('gunman_Z').value = gunman_Z;
				}
			}
		}


//		var pre_rotateY = -Math.PI/2;

		gunmanSpriteDummy.addEventListener(enchant.Event.ENTER_FRAME, function(){

			try {
//				moveCubes(0, 0, 0);

//				rotateY = (pre_rotateY + 0.01);
//				gunman.rotation.set(0, rotateY,  0);
//				pre_rotateY = rotateY

//				var progress_time = parseInt(game.frame/game.fps);
//				var limit_time_str = (10000 - progress_time + "");
//				var progress_time = game.frame/game.fps;
//				var limit_time_str = (10000 - progress_time + "").slice(0,-11);   //9999.1xxxxxxxxxxx
				var progress_time = game.frame/game.fps;
				var progress_time_str = ("00000" + progress_time.toFixed(3)).slice(-9);   //9999.12xxxxxxxxxx
				var limit_time_str = (10000 - progress_time).toFixed(3);   //9999.12xxxxxxxxxx
//				document.getElementById('time_limit').value = "" + limit_time_str;
				document.getElementById('progress_time').value = "" + progress_time_str;

				render();
			} catch (exception) {
				document.getElementById('debug').value = exception;
			}
		});
 
	        game.rootScene.addChild(gunmanSpriteDummy);

//		var time_label = new Label("aaa");
//		time_label.x = 3;
//		time_label.y = 3;
//		time_label.font = "16px monospace";
//		time_label.addEventListener(enchant.Event.ENTER_FRAME, function(){
//			var progress_time = parseInt(game.frame/game.fps);
//			var limit_time_str = 10000 - progress_time + "";
////			this.text = "time_limit: " + limit_time_str;
//			document.getElementById('time_limit').value = "time_limit: " + limit_time_str;
//		});
//		game.rootScene.addChild(time_label);

	buttonJ = new Sprite(60,60);
 	buttonG = new Sprite(60,60);

		buttonJ.image = game.assets["buttonJ.png"];
//	        buttonJ.x = 100;
//	        buttonJ.y = window.innerHeight-100;
	        buttonJ.scaleX = buttonJ.scaleY = 2;
		game.rootScene.addChild(buttonJ);

		buttonG.image = game.assets["buttonG.png"];
//	        buttonG.x = window.innerWidth-160;
//	        buttonG.y = window.innerHeight-100;
	        buttonG.scaleX = buttonG.scaleY = 2;
		game.rootScene.addChild(buttonG);

		onWindowResize();

	};

	game.start();

	window.addEventListener("deviceorientation", handleOrientation, true);

	function handleOrientation(event){
		var alpha    = event.alpha;
		var beta     = event.beta;
		var gamma    = event.gamma;
		document.getElementById('alpha').value = alpha;
		document.getElementById('beta').value = beta;
		document.getElementById('gamma').value = gamma;

		moveGunman(alpha, beta, gamma);
	}

</script>

<script>
//var alpha_ini = -1;
//var beta_ini = -1;
//var gamma_ini = -1;

//window.addEventListener("deviceorientation", handleOrientation, true);
//
//
//var pre_diffX = 0, pre_diffX2 = 0;
//var pre_diffZ = 0, pre_diffZ2 = 0;
//
//var gunman_X=0;
//var gunman_Z=0;

function _handleOrientation(event){

	var alpha    = event.alpha;
	var beta     = event.beta;
	var gamma    = event.gamma;

	if ( alpha_ini == -1 ) { alpha_ini = alpha; }
	if ( beta_ini == -1 ) { beta_ini = beta; }
	if ( gamma_ini == -1 ) { gamma_ini = gamma; }

	document.getElementById('alpha').value = alpha;
	document.getElementById('beta').value = beta;
	document.getElementById('gamma').value = gamma;

//    redrawArrow(alpha,beta,gamma);

	var diffX = (-1) *  Math.sin( (beta - beta_ini) * 2 * Math.PI /360) / 5 ;
	var diffZ = Math.sin( (gamma - gamma_ini) * 2 * Math.PI /360) / 5 ;

	var tot_diffX = pre_diffX2 + pre_diffX + diffX;
	var tot_diffZ = pre_diffZ2 + pre_diffZ + diffZ;

	var tmp_gunman_X = gunman_X - tot_diffX;
	var tmp_gunman_Z = gunman_Z + tot_diffZ;
	var floor_gunman_X = Math.floor(gunman_X);
	var floor_tmp_gunman_X = Math.floor(tmp_gunman_X);
	var floor_gunman_Z = Math.floor(gunman_Z);
	var floor_tmp_gunman_Z = Math.floor(tmp_gunman_Z);

	var ceil_gunman_X = Math.ceil(gunman_X);
	var ceil_tmp_gunman_X = Math.ceil(tmp_gunman_X);
	var ceil_gunman_Z = Math.ceil(gunman_Z);
	var ceil_tmp_gunman_Z = Math.ceil(tmp_gunman_Z);

	if ( diffX >= 0 ) { //上に行く
		if ( floor_gunman_X != floor_tmp_gunman_X ) {
			//ブロックをまたがって移動
			if ( cubeData[0][floor_tmp_gunman_X][floor_gunman_Z] == 9 
			  || cubeData[0][floor_tmp_gunman_X][ceil_gunman_Z] == 9
			) {
				tot_diffX = 0;
//				_tot_diffX = floor_gunman_X - gunman_X;
//				diffX = _tot_diffX - pre_diffX2 - pre_diffX;
//				tot_diffX = _tot_diffX;
			}
		}
	}

	if ( diffZ <= 0 ) { //左に行く
		if ( floor_gunman_Z != floor_tmp_gunman_Z ) {
			//ブロックをまたがって移動
			if ( cubeData[0][floor_gunman_X][floor_tmp_gunman_Z] == 9
			  || cubeData[0][ceil_gunman_X][floor_tmp_gunman_Z] == 9
			) {
				tot_diffZ = 0;
//				_tot_diffZ = floor_gunman_Z - gunman_Z;
//				diffZ = _tot_diffZ - pre_diffZ2 - pre_diffZ;
//				tot_diffZ = _tot_diffZ;
			}
		}
	}

	if ( diffX < 0 ) { //下に行く
		if ( ceil_gunman_X != ceil_tmp_gunman_X ) {
			//ブロックをまたがって移動
			if ( cubeData[0][ceil_tmp_gunman_X][ceil_gunman_Z] == 9
			  || cubeData[0][ceil_tmp_gunman_X][floor_gunman_Z] == 9
			) {
				tot_diffX = 0;
//				_tot_diffX = ceil_gunman_X - gunman_X;
//				diffX = _tot_diffX - pre_diffX2 - pre_diffX;
//				tot_diffX = _tot_diffX;
			}
		}
	}

	if ( diffZ > 0 ) { //右に行く
		if ( ceil_gunman_Z != ceil_tmp_gunman_Z ) {
			//ブロックをまたがって移動
			if ( cubeData[0][ceil_gunman_X][ceil_tmp_gunman_Z] == 9
			  || cubeData[0][floor_gunman_X][ceil_tmp_gunman_Z] == 9
			) {
				tot_diffZ = 0;
//				tot_diffZ = ceil_gunman_Z - gunman_Z;
//				diffZ = _tot_diffZ - pre_diffZ2 - pre_diffZ;
//				tot_diffZ = _tot_diffZ;
			}
		}
	}

	var gx = floor_gunman_X;
	var gz = floor_gunman_Z;

	var up   = (gunman_X - floor_gunman_X <= 0.5)?true:false;
	var left = (gunman_Z - floor_gunman_Z <= 0.5)?true:false;
	document.getElementById('left').value = left;
	document.getElementById('up').value = up;

	var gunmanDrop = false;

try {
	var cd = [ 
		 cubeData[0][gx-1][gz-1], cubeData[0][gx-1][gz], cubeData[0][gx-1][gz+1]
		,cubeData[0][gx  ][gz-1], cubeData[0][gx  ][gz], cubeData[0][gx  ][gz+1]
		,cubeData[0][gx+1][gz-1], cubeData[0][gx+1][gz], cubeData[0][gx+1][gz+1]
	];
	document.getElementById('cd0').value = cd[0];
	document.getElementById('cd1').value = cd[1];
	document.getElementById('cd2').value = cd[2];
	document.getElementById('cd3').value = cd[3];
	document.getElementById('cd4').value = cd[4];
	document.getElementById('cd5').value = cd[5];
	document.getElementById('cd6').value = cd[6];
	document.getElementById('cd7').value = cd[7];
	document.getElementById('cd8').value = cd[8];

//	if ( ( cd[0]==0 && cd[1]==0 && cd[3]==0 && cd[4]==0 &&  left &&  up )
//	  || ( cd[1]==0 && cd[2]==0 && cd[4]==0 && cd[5]==0 && !left &&  up )
//	  || ( cd[3]==0 && cd[4]==0 && cd[6]==0 && cd[7]==0 &&  left && !up )
//	  || ( cd[4]==0 && cd[5]==0 && cd[7]==0 && cd[8]==0 && !left && !up )
//	) {

	if ( cd[4]==0 && cd[5]==0 && cd[7]==0 && cd[8]==0 ) {
		gunmanDrop = true;
	}
} catch (exception) {
	gunmanDrop = false;
}

//	moveCubes(tot_diffX, 0,  tot_diffZ);

	moveGunman(-1 * tot_diffX, 0, -1 * tot_diffZ, gunmanDrop);

	//gunmanの座標。左上のボックスを(0,0)とする。diffXの方向と逆になってる。
	gunman_X -= tot_diffX;
	gunman_Z += tot_diffZ;

	document.getElementById('gunman_X').value = gunman_X;
	document.getElementById('gunman_Z').value = gunman_Z;

	var rotateY = Math.atan2(diffX, diffZ) + Math.PI;

	if ( gunman != null ) {
		gunman.rotation.set(0, rotateY,  0);
	}

	pre_diffX2 = pre_diffX;
	pre_diffZ2 = pre_diffZ;

	pre_diffX = diffX;
	pre_diffZ = diffZ;

}

</script>

</body>
</html>